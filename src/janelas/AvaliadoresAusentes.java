/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import objetosBase.avaliacao;
import objetosBase.avaliador;
import objetosBase.triviais.area;
import objetosBase.triviais.bolsa;
import objetosBase.triviais.evento;

/**
 *
 * @author SistemaIP
 */
public class AvaliadoresAusentes extends javax.swing.JFrame {

    
    ArrayList<avaliador> avaliadores;
    ArrayList<JCheckBox> avSelecionados;
    ArrayList<bolsa> bolsas = BancoDeDados.comando().getBolsas();
    ArrayList<area> areas = BancoDeDados.comando().getAreas();
 

    private final int Xminimo = 30;
    private final int Yminimo = 70;

    private final int alturaCH = 25;
    private final int larguraCH = 480;

    private final int espacoVerticalEntreCampos = 5;
    private final int EspacoHorizontalEntreCampos = 5;

    private final int limiteAlturaJanela = 480;
    private int pagina;
    private int aprsAtual = 0;
    
    
    private boolean iniciado;
    private ArrayList<avaliacao> permissoesAvaliacao;
    private final evento evento;
    private final Inicial JP;

    /**
     * Creates new form EscolheAvaliadoresApresentacoes
     *
     * @param c Array de registros de coordenador
     */
    public AvaliadoresAusentes(Inicial j, evento e) {
        JP = j;
        
        
        
        iniciado = false;
        initComponents();
        evento = e;
        CBEvento.removeAllItems();
        CBEvento.addItem(e.getNome());
        
        this.setLocationRelativeTo(null);
        //this.setResizable(false);
        //this.setIconImage(Arrumador.comando().getIcone().getImage());
        this.setVisible(true);
        this.setTitle("Indicar avaliadores ausentes no evento");
              
        iniciado = false;
        pesquisarAvaliadores(evento.getId());

        
        
        iniciado = true;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CBEvento = new javax.swing.JComboBox();
        BTSalvar = new javax.swing.JButton();
        Slider = new javax.swing.JSlider();
        Aviso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Escolher avaliadores para apresentações");

        CBEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBEvento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBEventoItemStateChanged(evt);
            }
        });

        BTSalvar.setText("Salvar");
        BTSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSalvarActionPerformed(evt);
            }
        });

        Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderStateChanged(evt);
            }
        });

        Aviso.setText(".");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Aviso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CBEvento, 0, 501, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTSalvar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CBEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTSalvar))
                    .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Aviso)
                .addContainerGap(511, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBEventoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBEventoItemStateChanged

        if (!iniciado) {
            return;
        }
        
        CBEvento.setToolTipText(CBEvento.getSelectedItem().toString());
        BTSalvar.setText("Salvar");
        BTSalvar.setEnabled(true);
        //salvar(aprsAtual);
        pesquisarAvaliadores(evento.getId());
    }//GEN-LAST:event_CBEventoItemStateChanged

    private void BTSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSalvarActionPerformed
       
        
        salvar();
                
    }//GEN-LAST:event_BTSalvarActionPerformed

    private void SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderStateChanged

        ativarAvaliadoresNaInterface(Slider.getValue());

    }//GEN-LAST:event_SliderStateChanged

    public void pesquisarAvaliadores(String evt) {
       
            
        
        avaliadores = new ArrayList<>();
       
        System.out.println("Iniciando pesquisa de avaliadores/acompanhantes...");
        
        avaliadores = BancoDeDados.comando().recuperarAvaliadoresPossiveisParaArea(-1,1,-1,true,evt);
        //somente avaliadores marcados como acompanhantes.
    
        System.out.println(avaliadores.size() + " avaliadores na memória.");

        for(avaliador av: avaliadores)
            av.descobrirQuantasEstaAvaliando(evento);
        
        // muda a interface
        atualizarInterface();

        //não verifica opções ja marcadas. Se quiser reincluir, ir em "Selecionar acompanhantes".
        
        Slider.setValue(0);
       
        
    }

   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvaliadoresAusentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvaliadoresAusentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvaliadoresAusentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvaliadoresAusentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // new EscolheAvaliadoresApresentacoes(coord).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Aviso;
    private javax.swing.JButton BTSalvar;
    private javax.swing.JComboBox CBEvento;
    private javax.swing.JSlider Slider;
    // End of variables declaration//GEN-END:variables

    private void atualizarInterface() {

        //checkbox ( nome, titulo, unidade) tooltip: Telefone, tipopessoa
        if (avSelecionados != null) {
            for (int a = 0; a < avSelecionados.size(); a++) {
                avSelecionados.get(a).setBounds(1, 1, 1, 1);
                avSelecionados.get(a).setEnabled(false);
                avSelecionados.get(a).setVisible(false);
                
            }
        }

        avSelecionados = new ArrayList<>();
        boolean visible = true;
        pagina = 0;
        int atraso = 0;

        for (int a = 0; a < avaliadores.size(); a++) {

            //adiciona ao vetor local
            avSelecionados.add(new JCheckBox(avaliadores.get(a).getNome() + " (" + avaliadores.get(a).getTitulacaoNome() + ", " + avaliadores.get(a).getUnidadeNome() + ") - "+ avaliadores.get(a).getNumeroAvaliacoesCadastradas()+ " avaliações a realizar"));
            // set bounds
            avSelecionados.get(a).setBounds(Xminimo,
                    Yminimo + ((a - atraso) * (alturaCH + espacoVerticalEntreCampos)),
                    larguraCH, alturaCH);
            // set tooltip
            avSelecionados.get(a).setToolTipText("Tel: " + avaliadores.get(a).getTelefone() + " (" + avaliadores.get(a).getTipoPessoaNome() + ")");
            // set visible e enabled
            avSelecionados.get(a).setVisible(visible);
            avSelecionados.get(a).setEnabled(visible);
            // adiciona ao panel
            this.add(avSelecionados.get(avSelecionados.size() - 1));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (a - atraso) * (alturaCH + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = a + 1;
                System.out.println("Avaliador n°" + a + " foi o último da página " + (pagina - 1));
            }

        }
        Slider.setMinimum(0);
        Slider.setMaximum(pagina);

    }

  


    
    
 

    public void salvar() {

        if (avaliadores == null) {
            return;
        }

        int cont=0;
        
        System.out.println("Iniciando processo de salvar mudanças...");
        
        for (int a = 0; a < avaliadores.size(); a++) {
            
            
            if (avSelecionados.get(a).isSelected()) {  // está selecionado. Incluir caso não esteja no BD
        
                System.out.println("Encontrou um caso de mudança: "+avaliadores.get(a).getNome());
                
                cont++;
                //avaliadores.get(a).setAcompanhante(false);
                //avaliadores.get(a).atualizarNaBase(false);
                avaliador x = BancoDeDados.comando().recuperarAvaliador(avaliadores.get(a).getCpf());
                x.setAcompanhante(false);
                x.atualizarNaBase(false,false);
            } 

        }

        Aviso.setText("Marcou "+cont+" ausente(s). Para reincluir, acesse 'Indicar Selecionar Acompanhantes'");
           
        pesquisarAvaliadores(evento.getId());
        
    }

    private void ativarAvaliadoresNaInterface(int pagina) {
        if (!iniciado) {
            return;
        }

        int pagAtual = 0;
        int atraso = 0;

        for (int a = 0; a < avaliadores.size(); a++) {
            avSelecionados.get(a).setVisible(pagina == pagAtual);
            avSelecionados.get(a).setEnabled(pagina == pagAtual);

            if ((Yminimo + (a - atraso) * (alturaCH + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                pagAtual++;
                 atraso = a + 1;
            }
           
        }

    }

     
  

}
