/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import objetosBase.avaliador;
import objetosBase.triviais.coordenador;
import objetosBase.triviais.unidade;

/**
 *
 * @author Usuario
 */
public class EditarUnidades extends javax.swing.JFrame {

    ArrayList<JTextField> nomes;
    ArrayList<JComboBox> coordenador;
    ArrayList<coordenador> coordenadoresObj;
    ArrayList<JSpinner> acompanhantes;
    ArrayList<JSpinner> posteres;
    ArrayList<JSpinner> comorais;
    ArrayList<JSpinner> roboticas;
    ArrayList<JSpinner> iftechs;
    ArrayList<JSpinner> culturais;

    ArrayList<JLabel> titulos = new ArrayList<>();

    ArrayList<unidade> objetos;
    ArrayList<ArrayList<avaliador>> avaliadores;

    private boolean iniciado = false;
    private int Xminimo = 30;
    private int Yminimo = 70;
    private int salvo = 0;

    private int alturaCampos = 25;

    private int larguraCH = 120;

    private int espacoVertical = 8;
    private int espacoHorizontal = 10;

    private int limiteAlturaJanela = 440;
    private final Inicial JP;

    public EditarUnidades(Inicial j) {
        initComponents();

        JP = j;
        //this.setIconImage(Arrumador.comando().getIcone().getImage());
        setVisible(false);
        this.setLocationRelativeTo(null);
        this.setResizable(true);

        this.setTitle("Editar propriedades das Unidades/Campi");
        avaliadores = new ArrayList<>();

        criarObjetosEAtualizarInterface();
        iniciado = true;
        this.setVisible(true);
    }

    public void criarObjetosEAtualizarInterface() {

        recuperarDadosCadastrados();

        criarInterface();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Slider = new javax.swing.JSlider();
        BTSalvar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderStateChanged(evt);
            }
        });

        BTSalvar.setText("Salvar");
        BTSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSalvarActionPerformed(evt);
            }
        });

        jButton1.setText("Configurações Avançadas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BTSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BTSalvar)
                        .addComponent(jButton1))
                    .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(518, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderStateChanged
        ativarPaginaNaInterface(Slider.getValue());
    }//GEN-LAST:event_SliderStateChanged

    private void BTSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSalvarActionPerformed
        atualizarSalvar();
    }//GEN-LAST:event_BTSalvarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JP.criarJanelaConfigs();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new CadastroOficinasSessoesMonitores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTSalvar;
    private javax.swing.JSlider Slider;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    private void criarInterface() {
        //nomesParticipantes, tipo, verbo, trabalhoOuCampus, documento
        //alturaCampos, larguraCH, larguraCB, espacoLateral, Xminimo, Yminimo
        int atraso = 0;
        boolean visible = true;
        int pagina = 0;

        //nomes,acompanhantes,posteres,comorais,iftechs,roboticas,culturais
        nomes = new ArrayList<>();
        coordenador = new ArrayList<>();
        acompanhantes = new ArrayList<>();
        posteres = new ArrayList<>();
        comorais = new ArrayList<>();
        iftechs = new ArrayList<>();
        roboticas = new ArrayList<>();
        culturais = new ArrayList<>();

        //adiciona ao vetor local ( new JComboBox )
        titulos.add(new JLabel("Unidade"));
        titulos.add(new JLabel("Coordenador"));
        titulos.add(new JLabel("Lim Acompanhantes"));
        titulos.add(new JLabel("Lim Pôster"));
        titulos.add(new JLabel("Lim Comun Oral"));
        titulos.add(new JLabel("Lim IFTECH"));
        titulos.add(new JLabel("Lim Robótica"));
        titulos.add(new JLabel("Lim Apr Culturais"));

        // set bounds
        for (int c = 0; c < titulos.size(); c++) {
            titulos.get(c).setBounds(Xminimo + c * (larguraCH + espacoHorizontal),
                    Yminimo - alturaCampos,
                    larguraCH, alturaCampos);
        }

        // adiciona ao panel
        for (JLabel titulo : titulos) {
            this.add(titulo);
        }

        int limiteAcom =0, limiteApr =0, limiteCom =0, limiteIftech =0, limiteRobotica =0, limiteCulturais =0;
        
        for (int i = 0; i < objetos.size(); i++) {

            //nomes,acompanhantes,posteres,comorais,iftechs,roboticas,culturais
            nomes.add(new JTextField(objetos.get(i).getNome()));

            SpinnerNumberModel m = new SpinnerNumberModel(objetos.get(i).getLimiteAcompanhantes(), 0, 100, 1);
            limiteAcom += objetos.get(i).getLimiteAcompanhantes();
            JSpinner sp = new JSpinner();
            sp.setModel(m);
            acompanhantes.add(sp);

            coordenador.add(new JComboBox());
            coordenador.get(i).removeAllItems();
            for (avaliador av : avaliadores.get(i)) {
                coordenador.get(i).addItem(av.getNome());
            }
            coordenador.get(i).addItem("-");

            limiteApr += objetos.get(i).getLimiteApresentacoesSelecionadas();
            SpinnerNumberModel m2 = new SpinnerNumberModel(objetos.get(i).getLimiteApresentacoesSelecionadas(), 0, 100, 1);
            JSpinner sp2 = new JSpinner();
            sp2.setModel(m2);
            posteres.add(sp2);

            limiteCom += objetos.get(i).getLimiteComunicacaoOralSelecionadas();
            SpinnerNumberModel m3 = new SpinnerNumberModel(objetos.get(i).getLimiteComunicacaoOralSelecionadas(), 0, 100, 1);
            JSpinner sp3 = new JSpinner();
            sp3.setModel(m3);
            comorais.add(sp3);

            limiteIftech += objetos.get(i).getLimiteIftech();
            SpinnerNumberModel m4 = new SpinnerNumberModel(objetos.get(i).getLimiteIftech(), 0, 100, 1);
            JSpinner sp4 = new JSpinner();
            sp4.setModel(m4);
            iftechs.add(sp4);
            
            limiteRobotica += objetos.get(i).getLimiteRobotica();
            SpinnerNumberModel m5 = new SpinnerNumberModel(objetos.get(i).getLimiteRobotica(), 0, 100, 1);
            JSpinner sp5 = new JSpinner();
            sp5.setModel(m5);
            roboticas.add(sp5);

            limiteCulturais += objetos.get(i).getLimiteculturais();
            SpinnerNumberModel m6 = new SpinnerNumberModel(objetos.get(i).getLimiteculturais(), 0, 100, 1);
            JSpinner sp6 = new JSpinner();
            sp6.setModel(m6);
            culturais.add(sp6);

            System.out.println("Limites: "+limiteAcom+" Acompanhates, "+limiteApr + " apresentacoes, "+ limiteCom + " comunicacoes, "+
                    limiteIftech +" iftech, "+limiteRobotica + " robotica, "+ limiteCulturais + " culturais.");
            System.out.println("Total de trabalhos: " + (limiteApr+limiteRobotica+limiteIftech+limiteCulturais));
            
            // set bounds
            nomes.get(i).setBounds(Xminimo + 0 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            coordenador.get(i).setBounds(Xminimo + 1 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);

            acompanhantes.get(i).setBounds(Xminimo + 2 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            posteres.get(i).setBounds(Xminimo + 3 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            comorais.get(i).setBounds(Xminimo + 4 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            iftechs.get(i).setBounds(Xminimo + 5 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            roboticas.get(i).setBounds(Xminimo + 6 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            culturais.get(i).setBounds(Xminimo + 7 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);

            // set tooltip
            nomes.get(i).setToolTipText("Unidade");
            coordenador.get(i).setToolTipText("Coordenador de Pesquisa do Campus");
            acompanhantes.get(i).setToolTipText("Limite de Acompanhantes");
            posteres.get(i).setToolTipText("Limite de Posteres");
            comorais.get(i).setToolTipText("Limite de Comunicações Orais");
            iftechs.get(i).setToolTipText("Limite de IFTECH");
            roboticas.get(i).setToolTipText("Limite de Robótica");
            culturais.get(i).setToolTipText("Limite de Culturais");

            //nomes,acompanhantes,posteres,comorais,iftechs,roboticas,culturais
            // set visible e enabled
            nomes.get(i).setVisible(visible);
            nomes.get(i).setEnabled(visible);
            nomes.get(i).setEditable(false);
            coordenador.get(i).setVisible(visible);
            coordenador.get(i).setEnabled(visible);
            acompanhantes.get(i).setVisible(visible);
            acompanhantes.get(i).setEnabled(visible);
            posteres.get(i).setVisible(visible);
            posteres.get(i).setEnabled(visible);
            comorais.get(i).setVisible(visible);
            comorais.get(i).setEnabled(visible);
            iftechs.get(i).setEnabled(visible);
            iftechs.get(i).setVisible(visible);
            roboticas.get(i).setEnabled(visible);
            roboticas.get(i).setVisible(visible);
            culturais.get(i).setEnabled(visible);
            culturais.get(i).setVisible(visible);

            // adiciona ao panel
            this.add(nomes.get(i));
            this.add(coordenador.get(i));
            this.add(acompanhantes.get(i));
            this.add(posteres.get(i));
            this.add(comorais.get(i));
            this.add(iftechs.get(i));
            this.add(roboticas.get(i));
            this.add(culturais.get(i));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (i - atraso) * (alturaCampos + espacoVertical)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = i + 1;
                System.out.println("Objeto n°" + i + " foi o último da página " + (pagina - 1));
            }

        }

        recuperarCoordenadoresUnidades();

        Slider.setMinimum(0);
        Slider.setMaximum(pagina);
        Slider.setValue(0);

    }

    private void ativarPaginaNaInterface(int pagina) {
        if (!iniciado) {
            return;
        }
        boolean visible;
        int pagAtual = 0;
        int atraso = 0;

        for (int i = 0; i < nomes.size(); i++) {
            visible = pagina == pagAtual;

            nomes.get(i).setVisible(visible);
            nomes.get(i).setEnabled(visible);
            nomes.get(i).setEditable(false);
            coordenador.get(i).setVisible(visible);
            coordenador.get(i).setEnabled(visible);
            acompanhantes.get(i).setVisible(visible);
            acompanhantes.get(i).setEnabled(visible);
            posteres.get(i).setVisible(visible);
            posteres.get(i).setEnabled(visible);
            comorais.get(i).setVisible(visible);
            comorais.get(i).setEnabled(visible);
            iftechs.get(i).setEnabled(visible);
            iftechs.get(i).setVisible(visible);
            roboticas.get(i).setEnabled(visible);
            roboticas.get(i).setVisible(visible);
            culturais.get(i).setEnabled(visible);
            culturais.get(i).setVisible(visible);

            if ((Yminimo + (i - atraso) * (alturaCampos + espacoVertical)) > limiteAlturaJanela) {
                pagAtual++;
                atraso = i + 1;
            }

        }

    }

    private void recuperarDadosCadastrados() {
        boolean visible = false;

        //recupera registros do BD
        objetos = BancoDeDados.comando().getUnidades();

        for (int x = 0; x < objetos.size(); x++) {
            avaliadores.add(BancoDeDados.comando().recuperarAvaliadoresDaUnidade(objetos.get(x).getId()));
        }

        if (nomes == null) {
            return;
        }

        //tira os atuais da interface
        for (int i = 0; i < nomes.size(); i++) {

            nomes.get(i).setVisible(visible);
            nomes.get(i).setEnabled(visible);
            nomes.get(i).setEditable(false);
            coordenador.get(i).setVisible(visible);
            coordenador.get(i).setEnabled(visible);
            acompanhantes.get(i).setVisible(visible);
            acompanhantes.get(i).setEnabled(visible);
            posteres.get(i).setVisible(visible);
            posteres.get(i).setEnabled(visible);
            comorais.get(i).setVisible(visible);
            comorais.get(i).setEnabled(visible);
            iftechs.get(i).setEnabled(visible);
            iftechs.get(i).setVisible(visible);
            roboticas.get(i).setEnabled(visible);
            roboticas.get(i).setVisible(visible);
            culturais.get(i).setEnabled(visible);
            culturais.get(i).setVisible(visible);

        }

    }

    private void atualizarSalvar() {

        for (int a = 0; a < objetos.size(); a++) {
            //nomes,acompanhantes,posteres,comorais,iftechs,roboticas,culturais
            //realimenta objetos
            objetos.get(a).reAlimentarObjeto((Integer) (acompanhantes.get(a).getValue()), (Integer) (posteres.get(a).getValue()), (Integer) (comorais.get(a).getValue()), (Integer) (iftechs.get(a).getValue()), (Integer) (roboticas.get(a).getValue()), (Integer) (culturais.get(a).getValue()));
            System.out.println("objetos.size " + objetos.size() + " avaliadores.size " + avaliadores.size() + " avaliadores.get(" + a + ").size " + avaliadores.get(a).size());
            
            
            if (!coordenador.get(a).getSelectedItem().toString().equals("-")) {
                objetos.get(a).adequarCoordenador(((avaliadores.get(a)).get(coordenador.get(a).getSelectedIndex())).getCpf());
            } else {
                objetos.get(a).adequarCoordenador("-");
            }

            //insere novos registros                  
            //atualiza registros já existentes
            objetos.get(a).adequarNoBd();

        }
        
        if(BancoDeDados.comando().gerarTickets())
            System.out.println("Executou função de geração/exclusão de tickets.");
        salvo++;
        System.out.println("Terminou de atualizar registros!");
        BTSalvar.setText("Salvar pela " + (salvo + 1) + "° vez");
    }

    private void recuperarCoordenadoresUnidades() {

        coordenadoresObj = new ArrayList<>();

        for (int a = 0; a < objetos.size(); a++) {

            coordenadoresObj.add(BancoDeDados.comando().recuperaCoordenadorUnidade(objetos.get(a)));

            objetos.get(a).setCpfCoordenador(coordenadoresObj.get(a).getAvaliador());
            coordenador.get(a).setSelectedItem(coordenadoresObj.get(a).getAvaliadorNome());

        }

    }
}
