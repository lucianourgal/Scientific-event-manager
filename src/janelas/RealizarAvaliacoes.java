/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import ClassesAuxiliares.Comunicador;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import objetosBase.avaliacao;
import objetosBase.avaliador;
import objetosBase.triviais.coordenador;
import objetosBase.triviais.evento;

/**
 * @author Luciano
 */
public class RealizarAvaliacoes extends javax.swing.JFrame {

    private final Inicial JP;
    private boolean decimais = false;
    private final String cpf;
    ChangeListener listener, listener2;
    //private ArrayList<apresentacao> apresentacoes;
    private final ArrayList<coordenador> coord;
    private ArrayList<avaliador> avaliadoresAusentes;

    private ArrayList<JTextArea> rotulos = new ArrayList<>();
    private ArrayList<JSpinner> notas = new ArrayList<>();
    private ArrayList<JCheckBox> avaliacaoAtiva = new ArrayList<>();
    private ArrayList<JCheckBox> ausente = new ArrayList<>();

    private final int Xminimo = 30;
    private final int Yminimo = 100;

    private final int alturaTextArea = 75 + 2 * 5;
    private final int larguraTextArea = 280;

    private final int larguraJSpinner = 80;
    private final int alturaJSpinner = 25;

    private final int espacoVerticalEntreCampos = 5;
    private final int EspacoHorizontalEntreCampos = 12;

    private final int limiteAlturaJanela = 600;

    private ArrayList<avaliacao> avaliacoes;
    private CadastroAvaliador cad;
    private boolean iniciado;
    private final evento event;
    private avaliador avaliadorAtual;

    public void seekndestroy() {
        try {
            cad.dispose();
        } catch (Exception e) {
        }
        dispose();
    }

    /**
     * Creates new form RealizarAvaliacoes
     *
     * @param jp1 Janela Inicial
     * @param cpf1 CPF do avaliador
     */
    public RealizarAvaliacoes(Inicial jp1, String cpf1, evento e) {
        iniciado = false;
        initComponents();
        this.setTitle("Realizar Avaliacoes - Avaliador de CPF "+cpf1);
        Slider.setMinimum(0);
        Slider.setMaximum(0);
        
        System.out.println("Inicalização básica");
        
        //if (BancoDeDados.comando().telaInicialSimples())
        
        
        
        
        boolean temCoord;
        
        if (BancoDeDados.comando().telaInicialSimples()){
        coord = BancoDeDados.comando().recuperaLacosCoordenador(cpf1);
            temCoord = coord.size() > 0;
        }
        else{
        temCoord = false;
        coord = new ArrayList<>();
        }
            
        System.out.println("Recuperou coordenador (ou nao)");
        
        CoordenarAvaliacoes.setVisible(temCoord);
        // BTSelecionarApresentacoes.setVisible(false);
        // BTSelecionarApresentacoes.setEnabled(false);
        CoordenarAvaliacoes.setVisible(false); //???
        event = e;
        
        JP = jp1;
        cpf = cpf1;
        
        avaliadorAtual = BancoDeDados.comando().recuperarAvaliador(cpf);
              
        System.out.println("Recuperou avaliador atual");
        
         if (temCoord && BancoDeDados.comando().telaInicialSimples()) {
            for (int a = 0; a < coord.size(); a++) {
                if (coord.get(a).getCentralizado() == 0) {
                    //  BTSelecionarApresentacoes.setVisible(temCoord);
                    JP.criarJanelaFuncoesCoordenacao(cpf1);
                } else {
                    JP.criarJanelaFuncoesCoordenacao(cpf1);
                }
            }
        }
        
        this.setLocationRelativeTo(null);
        //this.setResizable(false);
       // this.setIconImage(Arrumador.comando().getIcone().getImage());
        this.setVisible(true);
         
        
        System.out.println("Inicia atualização de interface");
        atualizarInterface(cpf1);
        System.out.println("Termina atualização de interface");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTAlterarMeusDados = new javax.swing.JButton();
        BTAlterarAvaliacoes = new javax.swing.JButton();
        LAviso = new javax.swing.JLabel();
        CoordenarAvaliacoes = new javax.swing.JButton();
        Slider = new javax.swing.JSlider();
        LSubstituto = new javax.swing.JLabel();
        CBSubstituto = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Realizar avaliações");

        BTAlterarMeusDados.setText("Alterar meus dados pessoais");
        BTAlterarMeusDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTAlterarMeusDadosActionPerformed(evt);
            }
        });

        BTAlterarAvaliacoes.setForeground(new java.awt.Color(0, 102, 0));
        BTAlterarAvaliacoes.setText("Salvar alterações nas avaliações");
        BTAlterarAvaliacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTAlterarAvaliacoesActionPerformed(evt);
            }
        });

        LAviso.setText("Nenhuma alteração até o momento. INSERIR notas de 0 a 1000. Ex: 9,5 = 950;   7,0 = 700 etc.");

        CoordenarAvaliacoes.setText("Coordenar Avaliações");
        CoordenarAvaliacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoordenarAvaliacoesActionPerformed(evt);
            }
        });

        Slider.setToolTipText("Mudar para outra(s) páginas de avaliações");
        Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderStateChanged(evt);
            }
        });

        LSubstituto.setForeground(new java.awt.Color(255, 0, 0));
        LSubstituto.setText("Sou um avaliador Substituto/IFTECH, avaliando trabalhos designados para:");

        CBSubstituto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBSubstituto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBSubstitutoItemStateChanged(evt);
            }
        });
        CBSubstituto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBSubstitutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTAlterarMeusDados, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(BTAlterarAvaliacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(CoordenarAvaliacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(LSubstituto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBSubstituto, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(LAviso, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTAlterarMeusDados, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(BTAlterarAvaliacoes))
                    .addComponent(CoordenarAvaliacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(LAviso)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LSubstituto)
                    .addComponent(CBSubstituto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(558, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTAlterarMeusDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTAlterarMeusDadosActionPerformed
        cad = new CadastroAvaliador("UPDATE", JP, cpf);
    }//GEN-LAST:event_BTAlterarMeusDadosActionPerformed

    /**
     * Indica valores finais de todas as notas.
     *
     */
    private void BTAlterarAvaliacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTAlterarAvaliacoesActionPerformed

        int cont=0;
        
        if (avaliacoes.size() < 1) {
            LAviso.setText("Não há avaliações para salvar no momento!");
            LAviso.setForeground(Color.blue);
            return;
        }

        LAviso.setText("Atualização de dados em processamento...");

        //deixa tudo no arraylist de avaliacoes, independente se deve ser salvo ou não    
        for (int a = 0; a < avaliacoes.size(); a++) {
            if(decimais)
            salvarAvaliacao(avaliacoes.get(a).getApresentacao(), (int) ((((double)notas.get(a).getValue())*100)), avaliacaoAtiva.get(a).isSelected(), ausente.get(a).isSelected());
            else
            salvarAvaliacao(avaliacoes.get(a).getApresentacao(), (int) notas.get(a).getValue(), avaliacaoAtiva.get(a).isSelected(), ausente.get(a).isSelected());
            // (int) notas.get(a).getValue() OR (int) (notas.get(a).getValue()*100)
        }

        
        //cpf: Se for do mesmo, será cpf(original), se estiver substituindo, será cpf(original, não do substituido) mesmo assim
        
        //em todos os objetos de avaliacao, chama o método de adequarNoBD, que decidirá qual a decisão para cada uma das avaliações ( nao estara na mesma ordem que as apresentacoes, mas tera todas)
        for (int b = 0; b < avaliacoes.size(); b++) {
            if (!avaliacoes.get(b).adequarNoBD(cpf)) {//SENÂO falha! Encerrar processo de adequação no BD
                System.out.println("Falha ao adequar no BD, avaliacao de apresentacao " + avaliacoes.get(b).getApresentacao());
                LAviso.setText("Falha na atualização dos dados!");
                LAviso.setForeground(Color.red);
            }else
                cont++;
        }

        evento e = event;
        
        //atualiza vetor de avaliacoes
        avaliacoes = BancoDeDados.comando().recuperarAvaliacoes(cpf, BancoDeDados.comando().getCentralizado(), -1,false,false,e.getId());
        avaliacoes.addAll(BancoDeDados.comando().recuperarAvaliacoes(cpf, BancoDeDados.comando().getCentralizado(), -1,true,false,e.getId()));
        
        //Anuncia sucesso da operação
        LAviso.setText("Dados atualizados com sucesso! ("+cont+" avaliações)");
        Comunicador c = new Comunicador(this, "Dados atualizados com sucesso! ("+cont+" avaliações)\n\nA janela ja pode ser fechada.\n\nObrigado por sua participacao!",
                "Sucesso no lancamento de notas!");
        if(cont>0 && event.isSepin()){ //caso tenha salvo alguma avaliação
            avaliadorAtual.setAcompanhante(true);
            avaliadorAtual.atualizarStatusAcompanhante(); //acompanhante = true, poderá receber certificado  
        }
        
        LAviso.setForeground(Color.blue);


    }//GEN-LAST:event_BTAlterarAvaliacoesActionPerformed

    private void CoordenarAvaliacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoordenarAvaliacoesActionPerformed
        JP.criarJanelaEscolherAvaliadores(coord);
    }//GEN-LAST:event_CoordenarAvaliacoesActionPerformed

    private void SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderStateChanged
        ativarAvaliadoresNaInterface(Slider.getValue());
    }//GEN-LAST:event_SliderStateChanged

    private void CBSubstitutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBSubstitutoActionPerformed
        
        
        
        
    }//GEN-LAST:event_CBSubstitutoActionPerformed

    private void CBSubstitutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBSubstitutoItemStateChanged
        if(!iniciado || CBSubstituto.getSelectedIndex()<0) //não iniciado ou índice zero ou inválido
            return;
        
        iniciado = false;
        
        if(CBSubstituto.getSelectedIndex()==0)
            atualizarInterface(cpf);
        else if(CBSubstituto.getSelectedIndex()>0)
            atualizarInterface(avaliadoresAusentes.get(CBSubstituto.getSelectedIndex()-1).getCpf());
        
    }//GEN-LAST:event_CBSubstitutoItemStateChanged

    private void liberarHabilitadosBloquearDesabilitados() {

        for (int a = 0; a < avaliacoes.size(); a++) {
            notas.get(a).setEnabled(avaliacaoAtiva.get(a).isSelected());
        }

    }

    private int getIndiceAvaliacao(int apresentacao) {
        for (int a = 0; a < avaliacoes.size(); a++) {
            if (avaliacoes.get(a).getApresentacao() == apresentacao) {
                return a;
            }
        }

        return -1;
    }

    private void salvarAvaliacao(int apresentacao, int nota, boolean ativo, boolean ausente) {
        int index = getIndiceAvaliacao(apresentacao);
        if (index == -1) { // nao encontrou. Nao está no BD
            avaliacao av = new avaliacao();
            av.setApresentacao(apresentacao);
            av.setAvaliador(cpf);
            av.setCentralizado(BancoDeDados.comando().getCentralizado());
            av.setExcluir(!ativo);
            av.setPrecisaEstarNoBD(true);
            av.setNotaInicial(-1);
            av.setNotaFinal(nota);
            av.setSalvoNoBD(false);
            av.setAusente(ausente);
            avaliacoes.add(av);
        } else { // encontrou. Está no BD. Atualizar dados para eventual mudança no BD
            avaliacoes.get(index).setExcluir(!ativo);
            avaliacoes.get(index).setNotaFinal(nota);
            avaliacoes.get(index).setAusente(ausente);
            avaliacoes.get(index).setPrecisaEstarNoBD(true);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealizarAvaliacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealizarAvaliacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealizarAvaliacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealizarAvaliacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //   new RealizarAvaliacoes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTAlterarAvaliacoes;
    private javax.swing.JButton BTAlterarMeusDados;
    private javax.swing.JComboBox CBSubstituto;
    private javax.swing.JButton CoordenarAvaliacoes;
    private javax.swing.JLabel LAviso;
    private javax.swing.JLabel LSubstituto;
    private javax.swing.JSlider Slider;
    // End of variables declaration//GEN-END:variables

    private int getIndiceApresentacao(int apresentacao) {
        for (int a = 0; a < avaliacoes.size(); a++) {
            if (avaliacoes.get(a).getApresentacao() == apresentacao) {
                return a;
            }
        }
        return -1;
    }

    private void atualizarInterface(String cpfInter) {
        
       for(int x=0;x<rotulos.size();x++){
           rotulos.get(x).setVisible(false);
           notas.get(x).setVisible(false);
           avaliacaoAtiva.get(x).setVisible(false);
           ausente.get(x).setVisible(false);
           rotulos.get(x).setEnabled(false);
           notas.get(x).setEnabled(false);
           avaliacaoAtiva.get(x).setEnabled(false);
           ausente.get(x).setEnabled(false);
       } 
       
       rotulos = new ArrayList<>();
       notas = new ArrayList<>();
       avaliacaoAtiva = new ArrayList<>();
       ausente = new ArrayList<>();
        
        
        avaliacoes = BancoDeDados.comando().recuperarAvaliacoes(cpfInter, BancoDeDados.comando().getCentralizado(), -1,false,false,event.getId());
        System.out.println("Recuperou parte das avaliações");
        avaliacoes.addAll(BancoDeDados.comando().recuperarAvaliacoes(cpfInter, BancoDeDados.comando().getCentralizado(), -1,true,false,event.getId()));
       
        System.out.println("Recuperou todas as avaliações");
        
        if(cpfInter.equals(cpf)){//é a interface inicial/principal. Ajusta CB e L substitutos.
        
            
        //Já tem mais de X avaliações para fazer. Não mostra interface
        if(avaliacoes.size()>4){
           LSubstituto.setVisible(false);
           CBSubstituto.setVisible(false);        
        }else{// está livre para fazer mais avaliações e substituições.
            LSubstituto.setVisible(true);
            CBSubstituto.setVisible(true);
            CBSubstituto.removeAllItems();
            CBSubstituto.addItem("Eu mesmo.");
            
            avaliadoresAusentes = BancoDeDados.comando().getAvaliadoresAusentes(event);
            for(avaliador av: avaliadoresAusentes)
                CBSubstituto.addItem(av.getNome()+" ("+av.getUnidadeNome()+")");
            
        }    
        
        }else{ //Está substituindo alguém. Apresentações tem o 'avaliador' atualizado
        
            //for(avaliacao av: avaliacoes)
             //   av.setAvaliador(cpf);
            
        }
        
       
        System.out.println("Total de apresentações: " + avaliacoes.size());

        listener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                liberarHabilitadosBloquearDesabilitados();
            }
        };

        listener2 = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                avaliandoAusente();
            }

            private void avaliandoAusente() {

                for (int a = 0; a < avaliacoes.size(); a++) {
                    avaliacaoAtiva.get(a).setEnabled(!ausente.get(a).isSelected());
                    if (ausente.get(a).isSelected()) {
                        avaliacaoAtiva.get(a).setSelected(true);
                        notas.get(a).setValue(0);
                    }
                }
            }
        };
        String textoGeral = "";
        int coluna = 0;
        boolean visible = true;
        int pagina = 0;
        int atraso = 0;
        String texto = "";
        // rotulos,notas, avaliacaoAtiva, ausente
        // construção da interface 
        for (int a = 0; a < avaliacoes.size() / 2; a++) {
            texto = "(ID " + avaliacoes.get(a).getApresentacao() + ") " + avaliacoes.get(a).getApresentacaoNomeRealizarAv()
                    + "\n" + avaliacoes.get(a).getCategoriaNome() +", "+ avaliacoes.get(a).getUnidadeApresentadorNome()
                    + "\nApresentador: "  +avaliacoes.get(a).getApresentadorNome();
            
            textoGeral = textoGeral  + "\n"+texto;
            rotulos.add(new JTextArea(texto));
            rotulos.get(a).setBounds(Xminimo + coluna * (larguraTextArea + larguraJSpinner + EspacoHorizontalEntreCampos),
                    Yminimo + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos),
                    larguraTextArea, alturaTextArea);
            rotulos.get(a).setEditable(false);
            rotulos.get(a).setVisible(visible);
            this.add(rotulos.get(a));

            SpinnerNumberModel model1;

            if (decimais) {
                model1 = new SpinnerNumberModel(10.00, 0.00, 10.00, 0.01); //1000,0,1000,1 OR 10.00,0.00,10.00, 0.01
            } else {
                model1 = new SpinnerNumberModel(1000, 0, 1000, 1); //1000,0,1000,1 OR 10.00,0.00,10.00, 0.01
            }
            notas.add(new JSpinner(model1));
            notas.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + EspacoHorizontalEntreCampos),
                    Yminimo + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos),
                    larguraJSpinner, alturaJSpinner);
            notas.get(a).setEnabled(false);
            notas.get(a).setVisible(visible);
            this.add(notas.get(a));

            avaliacaoAtiva.add(new JCheckBox("Avaliado"));
            avaliacaoAtiva.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + EspacoHorizontalEntreCampos),
                    Yminimo + alturaJSpinner + espacoVerticalEntreCampos + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos), larguraJSpinner, alturaJSpinner);
            avaliacaoAtiva.get(a).addChangeListener(listener);
            avaliacaoAtiva.get(a).setVisible(visible);
            this.add(avaliacaoAtiva.get(a));

            ausente.add(new JCheckBox("Ausente"));
            ausente.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + EspacoHorizontalEntreCampos),
                    Yminimo + alturaJSpinner * 2 + espacoVerticalEntreCampos * 2 + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos), larguraJSpinner, alturaJSpinner);
            ausente.get(a).addChangeListener(listener2);
            ausente.get(a).setVisible(visible);
            this.add(ausente.get(a));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = a + 1;
                System.out.println("Apresentação n°" + a + " foi o última da página " + (pagina - 1));
            }

        }

        visible = true;
        pagina = 0;
        atraso = 0;
        coluna++;
        
        
        for (int a = avaliacoes.size() / 2; a < avaliacoes.size(); a++) {
            texto = "(ID " + avaliacoes.get(a).getApresentacao() + ") " + avaliacoes.get(a).getApresentacaoNomeRealizarAv()
                    + "\n" + avaliacoes.get(a).getCategoriaNome() +", "+ avaliacoes.get(a).getUnidadeApresentadorNome()
                    + "\nApresentador: " +avaliacoes.get(a).getApresentadorNome();
            rotulos.add(new JTextArea(texto));
            textoGeral = textoGeral  + "\n"+texto;
            rotulos.get(a).setBounds(Xminimo + coluna * (larguraTextArea + larguraJSpinner + 2 * EspacoHorizontalEntreCampos),
                    Yminimo + (a - atraso - (int) avaliacoes.size() / 2) * (alturaTextArea + espacoVerticalEntreCampos),
                    larguraTextArea, alturaTextArea);
            rotulos.get(a).setEditable(false);
            rotulos.get(a).setVisible(visible);
            this.add(rotulos.get(a));

            SpinnerNumberModel model2;
            if (decimais) {
                model2 = new SpinnerNumberModel(10.00, 0.00, 10.00, 0.01); //1000,0,1000,1 OR 10.00,0.00,10.00, 0.01
            } else {
                model2 = new SpinnerNumberModel(1000, 0, 1000, 1); //1000,0,1000,1 OR 10.00,0.00,10.00, 0.01
            }
            notas.add(new JSpinner(model2));
            notas.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + 2 * EspacoHorizontalEntreCampos),
                    Yminimo + (a - atraso - (int) avaliacoes.size() / 2) * (alturaTextArea + espacoVerticalEntreCampos),
                    larguraJSpinner, alturaJSpinner);
            notas.get(a).setEnabled(false);
            notas.get(a).setVisible(visible);
            this.add(notas.get(a));

            avaliacaoAtiva.add(new JCheckBox("Avaliado"));
            avaliacaoAtiva.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + 2 * EspacoHorizontalEntreCampos),
                    Yminimo + alturaJSpinner + espacoVerticalEntreCampos + (a - atraso - (int) avaliacoes.size() / 2) * (alturaTextArea + espacoVerticalEntreCampos), larguraJSpinner, alturaJSpinner);
            avaliacaoAtiva.get(a).addChangeListener(listener);
            avaliacaoAtiva.get(a).setVisible(visible);
            this.add(avaliacaoAtiva.get(a));

            ausente.add(new JCheckBox("Ausente"));
            ausente.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos + coluna * (larguraTextArea + larguraJSpinner + 2 * EspacoHorizontalEntreCampos),
                    Yminimo + alturaJSpinner * 2 + espacoVerticalEntreCampos + (a - atraso - (int) avaliacoes.size() / 2) * (alturaTextArea + espacoVerticalEntreCampos), larguraJSpinner, alturaJSpinner);
            ausente.get(a).addChangeListener(listener2);
            ausente.get(a).setVisible(visible);
            this.add(ausente.get(a));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (a - atraso - avaliacoes.size()/2) * (alturaTextArea + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = a + 1;
                System.out.println("Apresentação n°" + a + " foi o última da página " + (pagina - 1));
            }

        }
       
        coluna++;
        Slider.setMinimum(0);
        Slider.setMaximum(pagina);
        iniciado = true;

        /*  for(int a =2*apresentacoes.size()/3;a<apresentacoes.size();a++){
         rotulos.add(new JTextArea("(ID "+apresentacoes.get(a).getId()+") "+apresentacoes.get(a).getNometitulo()
         + "\n"+apresentacoes.get(a).getAreaNome()+" ("+apresentacoes.get(a).getSubareaNome()+")"
         + "\nApresentador: "+apresentacoes.get(a).getApresentadorNome()));
         rotulos.get(a).setBounds(Xminimo+coluna*(larguraTextArea+larguraJSpinner+2*EspacoHorizontalEntreCampos), Yminimo + (a-(int)2*apresentacoes.size()/3)*(alturaTextArea+espacoVerticalEntreCampos), 
         larguraTextArea, alturaTextArea);
         rotulos.get(a).setEditable(false);
         this.add(rotulos.get(a));
             
         SpinnerNumberModel model3 = new SpinnerNumberModel(1000,0,1000,1);
         notas.add(new JSpinner(model3));
         notas.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos +coluna*(larguraTextArea+larguraJSpinner+2*EspacoHorizontalEntreCampos), Yminimo+(a-(int)2*apresentacoes.size()/3)*(alturaTextArea+espacoVerticalEntreCampos),
         larguraJSpinner, alturaJSpinner);
         notas.get(a).setEnabled(false);
         this.add(notas.get(a));
             
         avaliacaoAtiva.add(new JCheckBox("Avaliado"));
         avaliacaoAtiva.get(a).setBounds(Xminimo + larguraTextArea + EspacoHorizontalEntreCampos +coluna*(larguraTextArea+larguraJSpinner+2*EspacoHorizontalEntreCampos), Yminimo + alturaJSpinner + espacoVerticalEntreCampos + (a-(int)2*apresentacoes.size()/3)*(alturaTextArea+espacoVerticalEntreCampos)
         , larguraJSpinner, alturaJSpinner);
         avaliacaoAtiva.get(a).addChangeListener(listener);
         this.add(avaliacaoAtiva.get(a));
         }*/
        coluna++;
        
        
        int index;
        for (int a = 0; a < avaliacoes.size(); a++) {
            index = getIndiceAvaliacao(avaliacoes.get(a).getApresentacao());
            if (index != -1) {
                if(decimais)
                notas.get(a).setValue(((double)avaliacoes.get(index).getNotaInicial())/100.0); // avaliacoes.get(index).getNotaInicial() OR ((double)avaliacoes.get(index).getNotaInicial())/100.0
                else
                    notas.get(a).setValue(avaliacoes.get(index).getNotaInicial()); // avaliacoes.get(index).getNotaInicial() OR ((double)avaliacoes.get(index).getNotaInicial())/100.0
                ausente.get(a).setSelected(avaliacoes.get(index).isAusente());
                avaliacaoAtiva.get(a).setSelected(avaliacoes.get(index).getAtiva()>0);//!avaliacoes.get(index).isExcluir());
            }
        }

        System.out.println("Inteface atualizada!");
    }

    private void ativarAvaliadoresNaInterface(int pagina) {
        // rotulos,notas, avaliacaoAtiva, ausente
        if (!iniciado) {
            return;
        }

        int pagAtual = 0;
        int atraso = 0;

        for (int a = 0; a < avaliacoes.size() / 2; a++) {
            rotulos.get(a).setVisible(pagina == pagAtual);
            notas.get(a).setVisible(pagina == pagAtual);
            avaliacaoAtiva.get(a).setVisible(pagina == pagAtual);
            ausente.get(a).setVisible(pagina == pagAtual);

            if (Yminimo + (a - atraso) * (alturaTextArea + espacoVerticalEntreCampos) > limiteAlturaJanela) {
                pagAtual++;
                atraso = a + 1;
            }

        } // fim primeira parte
        pagAtual = 0;
        atraso = 0;

        for (int a = avaliacoes.size() / 2; a < avaliacoes.size(); a++) {
            rotulos.get(a).setVisible(pagina == pagAtual);
            notas.get(a).setVisible(pagina == pagAtual);
            avaliacaoAtiva.get(a).setVisible(pagina == pagAtual);
            ausente.get(a).setVisible(pagina == pagAtual);

            if (Yminimo + (a - atraso - (int) avaliacoes.size() / 2) * (alturaTextArea + espacoVerticalEntreCampos) > limiteAlturaJanela) {
                pagAtual++;
                atraso = a + 1;
            }

        } // fim segunda parte

    }

    public ArrayList<coordenador> getCoordenacoes(){
        return coord;
    }
    
    public boolean temCoordenacaoGeral(){
     
        if(coord.size()<1)
            return false;
        
        for(coordenador c: coord)
            if(c.getCentralizado()>0)
                return true;
        
        return false;
    }
}
