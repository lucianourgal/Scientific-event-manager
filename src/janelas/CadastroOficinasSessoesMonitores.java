/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import objetosBase.oficinaSessaoMonitor;
import objetosBase.triviais.evento;

/**
 *
 * @author Usuario
 */
public class CadastroOficinasSessoesMonitores extends javax.swing.JFrame {

    ArrayList<JTextField> nomesParticipantes;
    ArrayList<JComboBox> tipo;
    ArrayList<JComboBox> verbo;
    ArrayList<JTextField> trabalhoOuCampus;
    ArrayList<JTextField> documento;

    ArrayList<JLabel> titulos = new ArrayList<>();

    ArrayList<oficinaSessaoMonitor> objetos;

    private boolean iniciado = false;
    private int Xminimo = 30;
    private int Yminimo = 70;
    private int salvo = 0;

    private int alturaCampos = 25;

    private int larguraCH = 180;

    private int espacoVertical = 8;
    private int espacoHorizontal = 10;

    private int limiteAlturaJanela = 440;
    private final Inicial JP;
    private final ArrayList<evento> eventos;

    public CadastroOficinasSessoesMonitores(Inicial j) {
        initComponents();
        JP = j;
        //this.setIconImage(Arrumador.comando().getIcone().getImage());
        setVisible(false);
        this.setLocationRelativeTo(null);
        this.setResizable(true);

        this.setTitle("Cadastro de Oficinas, Sessões Temáticas e Monitores");

        CBEvento.removeAllItems();
        eventos = BancoDeDados.comando().getTodosEventos();
        for (evento evento : eventos) {
            CBEvento.addItem(evento.getNome());
        }

        criarObjetosEAtualizarInterface();
        iniciado = true;
        this.setVisible(true);
    }

    public void criarObjetosEAtualizarInterface() {
        if (!iniciado) {
            recuperarDadosCadastrados(eventos.get(0).getId());
        } else {
            recuperarDadosCadastrados(eventos.get(CBEvento.getSelectedIndex()).getId());
        }
        gerarObjetosVazios(50);
        criarInterface();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Slider = new javax.swing.JSlider();
        BTSalvar = new javax.swing.JButton();
        CBEvento = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderStateChanged(evt);
            }
        });

        BTSalvar.setText("Salvar");
        BTSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSalvarActionPerformed(evt);
            }
        });

        CBEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBEvento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBEventoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CBEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(BTSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CBEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(BTSalvar)
                        .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(518, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderStateChanged
        ativarPaginaNaInterface(Slider.getValue());
    }//GEN-LAST:event_SliderStateChanged

    private void BTSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSalvarActionPerformed
        atualizarSalvar();
    }//GEN-LAST:event_BTSalvarActionPerformed

    private void CBEventoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBEventoItemStateChanged

        if(iniciado)
        criarObjetosEAtualizarInterface();

    }//GEN-LAST:event_CBEventoItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroOficinasSessoesMonitores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroOficinasSessoesMonitores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroOficinasSessoesMonitores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroOficinasSessoesMonitores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new CadastroOficinasSessoesMonitores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTSalvar;
    private javax.swing.JComboBox CBEvento;
    private javax.swing.JSlider Slider;
    // End of variables declaration//GEN-END:variables

    private void criarInterface() {
        //nomesParticipantes, tipo, verbo, trabalhoOuCampus, documento
        //alturaCampos, larguraCH, larguraCB, espacoLateral, Xminimo, Yminimo
        int atraso = 0;
        boolean visible = true;
        int pagina = 0;

        nomesParticipantes = new ArrayList<>();
        tipo = new ArrayList<>();
        verbo = new ArrayList<>();
        trabalhoOuCampus = new ArrayList<>();
        documento = new ArrayList<>();

        //adiciona ao vetor local ( new JComboBox )
        titulos.add(new JLabel("Tipo"));
        titulos.add(new JLabel("Pessoas envolvidas"));
        titulos.add(new JLabel("Verbo ou Genero(Monitor)"));
        titulos.add(new JLabel("Título ou Campus(Monitor)"));
        titulos.add(new JLabel("Documento"));

        // set bounds
        titulos.get(0).setBounds(Xminimo + 0 * (larguraCH + espacoHorizontal),
                Yminimo - alturaCampos,
                larguraCH, alturaCampos);
        titulos.get(1).setBounds(Xminimo + 1 * (larguraCH + espacoHorizontal),
                Yminimo - alturaCampos,
                larguraCH, alturaCampos);
        titulos.get(2).setBounds(Xminimo + 2 * (larguraCH + espacoHorizontal),
                Yminimo - alturaCampos,
                larguraCH, alturaCampos);
        titulos.get(3).setBounds(Xminimo + 3 * (larguraCH + espacoHorizontal),
                Yminimo - alturaCampos,
                larguraCH, alturaCampos);
        titulos.get(4).setBounds(Xminimo + 4 * (larguraCH + espacoHorizontal),
                Yminimo - alturaCampos,
                larguraCH, alturaCampos);
        // adiciona ao panel
        for (JLabel titulo : titulos) {
            this.add(titulo);
        }

        for (int i = 0; i < objetos.size(); i++) {

            //adiciona ao vetor local ( new JComboBox )
            nomesParticipantes.add(new JTextField(objetos.get(i).getNomeParticipantes()));
            tipo.add(criarComboBoxTipos());
            tipo.get(i).setSelectedItem(objetos.get(i).getTipo());
            verbo.add(criarComboBoxVerbos());
            verbo.get(i).setSelectedItem(objetos.get(i).getVerbo());
            trabalhoOuCampus.add(new JTextField(objetos.get(i).getTrabalhoOuCampus()));
            documento.add(new JTextField(objetos.get(i).getDocumento()));

            // set bounds
            tipo.get(i).setBounds(Xminimo + 0 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            nomesParticipantes.get(i).setBounds(Xminimo + 1 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            verbo.get(i).setBounds(Xminimo + 2 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            trabalhoOuCampus.get(i).setBounds(Xminimo + 3 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);
            documento.get(i).setBounds(Xminimo + 4 * (larguraCH + espacoHorizontal),
                    Yminimo + ((i - atraso) * (alturaCampos + espacoVertical)),
                    larguraCH, alturaCampos);

            // set tooltip
            tipo.get(i).setToolTipText("Tipo do certificado");
            nomesParticipantes.get(i).setToolTipText("Pessoa(s) envolvida(s)");
            verbo.get(i).setToolTipText("Verbo/genero no certificado");
            trabalhoOuCampus.get(i).setToolTipText("Nome da oficina/sessao/palestra ou CAMPUS para monitor");
            documento.get(i).setToolTipText("Documento: Siape ou CPF");

            // set visible e enabled
            tipo.get(i).setVisible(visible);
            tipo.get(i).setEnabled(visible);
            nomesParticipantes.get(i).setVisible(visible);
            nomesParticipantes.get(i).setEnabled(visible);
            verbo.get(i).setVisible(visible);
            verbo.get(i).setEnabled(visible);
            trabalhoOuCampus.get(i).setVisible(visible);
            trabalhoOuCampus.get(i).setEnabled(visible);
            documento.get(i).setEnabled(visible);
            documento.get(i).setVisible(visible);

            // adiciona ao panel
            this.add(tipo.get(i));
            this.add(nomesParticipantes.get(i));
            this.add(verbo.get(i));
            this.add(trabalhoOuCampus.get(i));
            this.add(documento.get(i));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (i - atraso) * (alturaCampos + espacoVertical)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = i + 1;
                System.out.println("Objeto n°" + i + " foi o último da página " + (pagina - 1));
            }

        }
        Slider.setMinimum(0);
        Slider.setMaximum(pagina);
        Slider.setValue(0);
              
    }

    private JComboBox criarComboBoxTipos() {

        JComboBox r = new JComboBox();
        r.removeAllItems();
        r.addItem("Oficina");
        r.addItem("Palestra");
        r.addItem("Sessão Temática");
        r.addItem("Monitor");
        r.addItem("-");

        return r;
    }

    private JComboBox criarComboBoxVerbos() {
        JComboBox r = new JComboBox();
        r.removeAllItems();
        r.addItem("auxiliou na organização da");
        r.addItem("auxiliaram na organização da");
        r.addItem("ministrou");
        r.addItem("ministraram");
        r.addItem("monitor");
        r.addItem("monitora");
        r.addItem("-");

        return r;
    }

    private void gerarObjetosVazios(int quant) {

        for (int a = 0; a < quant; a++) {

            oficinaSessaoMonitor novo = new oficinaSessaoMonitor();
            novo.setTipo("-");
            novo.setVerbo("-");
            novo.setId(-1);
            objetos.add(novo);

        }

    }

    private void ativarPaginaNaInterface(int pagina) {
        if (!iniciado) {
            return;
        }
        boolean visible;
        int pagAtual = 0;
        int atraso = 0;

        for (int i = 0; i < tipo.size(); i++) {
            visible = pagina == pagAtual;

            tipo.get(i).setVisible(visible);
            tipo.get(i).setEnabled(visible);
            nomesParticipantes.get(i).setVisible(visible);
            nomesParticipantes.get(i).setEnabled(visible);
            verbo.get(i).setVisible(visible);
            verbo.get(i).setEnabled(visible);
            trabalhoOuCampus.get(i).setVisible(visible);
            trabalhoOuCampus.get(i).setEnabled(visible);
            documento.get(i).setEnabled(visible);
            documento.get(i).setVisible(visible);

            if ((Yminimo + (i - atraso) * (alturaCampos + espacoVertical)) > limiteAlturaJanela) {
                pagAtual++;
                atraso = i + 1;
            }

        }

    }

    private void recuperarDadosCadastrados(String evento) {
        boolean visible = false;
        
         //recupera registros do BD
        objetos = BancoDeDados.comando().getArrayOficinaSessaoMonitor(evento);
        
        
        if(tipo==null){
            return;
        }
            
        
        //tira os atuais da interface
        for (int i = 0; i < tipo.size(); i++) {

            tipo.get(i).setVisible(visible);
            tipo.get(i).setEnabled(visible);
            nomesParticipantes.get(i).setVisible(visible);
            nomesParticipantes.get(i).setEnabled(visible);
            verbo.get(i).setVisible(visible);
            verbo.get(i).setEnabled(visible);
            trabalhoOuCampus.get(i).setVisible(visible);
            trabalhoOuCampus.get(i).setEnabled(visible);
            documento.get(i).setEnabled(visible);
            documento.get(i).setVisible(visible);

        }

       

    }

    private void atualizarSalvar() {

        for (int a = 0; a < objetos.size(); a++) {
            //realimenta objetos
            objetos.get(a).reAlimentarObjeto(tipo.get(a).getSelectedItem().toString(), nomesParticipantes.get(a).getText(),
                    verbo.get(a).getSelectedItem().toString(), trabalhoOuCampus.get(a).getText(), documento.get(a).getText());

            objetos.get(a).setEvento(eventos.get(CBEvento.getSelectedIndex()).getId());
            
            //insere novos registros                  
            //atualiza registros já existentes
            objetos.get(a).adequarNoBd();

        }
        salvo++;
        System.out.println("Terminou de salvar e atualizar registros!");
        BTSalvar.setText("Salvar pela "+(salvo+1)+"° vez");
    }
}
