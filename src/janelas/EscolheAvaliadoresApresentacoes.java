/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import ClassesAuxiliares.GeradorPDF;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import objetosBase.apresentacao;
import objetosBase.avaliacao;
import objetosBase.avaliador;
import objetosBase.triviais.area;
import objetosBase.triviais.bolsa;
import objetosBase.triviais.coordenador;
import objetosBase.triviais.evento;

/**
 *
 * @author SistemaIP
 */
public class EscolheAvaliadoresApresentacoes extends javax.swing.JFrame {

    ArrayList<apresentacao> apresentacoes;
    ArrayList<avaliador> avaliadores;
    ArrayList<JCheckBox> avSelecionados;
    ArrayList<bolsa> bolsas = BancoDeDados.comando().getBolsas();
    ArrayList<area> areas = BancoDeDados.comando().getAreas();
    private final ArrayList<coordenador> coord;

    private final int Xminimo = 30;
    private final int Yminimo = 100;

    private final int alturaCH = 25;
    private final int larguraCH = 480;

    private final int espacoVerticalEntreCampos = 5;
    private final int EspacoHorizontalEntreCampos = 5;

    private final int limiteAlturaJanela = 480;
    private int pagina;
    private int aprsAtual = 0;
    
    
    private boolean iniciado;
    private ArrayList<avaliacao> permissoesAvaliacao;
    private final evento evento;

    /**
     * Creates new form EscolheAvaliadoresApresentacoes
     *
     * @param c Array de registros de coordenador
     */
    public EscolheAvaliadoresApresentacoes(ArrayList<coordenador> c, evento e) {
        coord = c;
        System.out.println("Possui " + c.size() + " cargos de coordenador.");
        iniciado = false;
        initComponents();
        evento = e;
        this.setLocationRelativeTo(null);
        //this.setResizable(false);
       // this.setIconImage(Arrumador.comando().getIcone().getImage());
        this.setVisible(true);

        CBCoord.removeAllItems();
        for (coordenador c2 : coord) {
            CBCoord.addItem(c2.getCentralizadoTexto());
        }
        CBCoord.setSelectedIndex(0);

        reloadApresentacoes();
        iniciado = false;
        pesquisarAvaliadores();

        
        
        iniciado = true;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CBApresentacao = new javax.swing.JComboBox();
        CBCoord = new javax.swing.JComboBox();
        BTSalvar = new javax.swing.JButton();
        Slider = new javax.swing.JSlider();
        Aviso = new javax.swing.JLabel();
        BTFichasFrente = new javax.swing.JButton();
        BTFichasDuplex = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Escolher avaliadores para apresentações");

        CBApresentacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBApresentacao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBApresentacaoItemStateChanged(evt);
            }
        });

        CBCoord.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBCoord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBCoordItemStateChanged(evt);
            }
        });

        BTSalvar.setText("Salvar");
        BTSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSalvarActionPerformed(evt);
            }
        });

        Slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderStateChanged(evt);
            }
        });

        Aviso.setText(".");

        BTFichasFrente.setText("Gerar Fichas de Avaliação (frente)");
        BTFichasFrente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTFichasFrenteActionPerformed(evt);
            }
        });

        BTFichasDuplex.setText("Gerar Fichas de Avaliação (duplex)");
        BTFichasDuplex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTFichasDuplexActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CBApresentacao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Aviso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BTFichasFrente, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BTFichasDuplex, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Slider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(CBCoord, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BTSalvar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CBApresentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CBCoord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BTSalvar))
                            .addComponent(Aviso))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTFichasFrente)
                            .addComponent(BTFichasDuplex)))
                    .addComponent(Slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(476, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBApresentacaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBApresentacaoItemStateChanged

        if (!iniciado) {
            return;
        }
        
        CBApresentacao.setToolTipText(CBApresentacao.getSelectedItem().toString());
        BTSalvar.setText("Salvar");
        BTSalvar.setEnabled(true);
        //salvar(aprsAtual);
        pesquisarAvaliadores();
    }//GEN-LAST:event_CBApresentacaoItemStateChanged

    private void CBCoordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBCoordItemStateChanged
        if (!iniciado) {
            return;
        }
        reloadApresentacoes();
    }//GEN-LAST:event_CBCoordItemStateChanged

    private void BTSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSalvarActionPerformed
        Aviso.setText("Salvou para "+ apresentacoes.get(CBApresentacao.getSelectedIndex()).getNometitulo()+" ("+apresentacoes.get(CBApresentacao.getSelectedIndex()).getId()+")!");
        salvar();
        
      //  BTSalvar.setText("Salvo");
       // BTSalvar.setEnabled(false);
        
    }//GEN-LAST:event_BTSalvarActionPerformed

    private void SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderStateChanged

        ativarAvaliadoresNaInterface(Slider.getValue());

    }//GEN-LAST:event_SliderStateChanged

    private void BTFichasFrenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTFichasFrenteActionPerformed
        GeradorPDF gpdf = new GeradorPDF();
        gpdf.gerarTodasFichasDeAvaliacao(evento.getId(), true,false);
        Aviso.setText("Fichas de Avaliação geradas!");
    }//GEN-LAST:event_BTFichasFrenteActionPerformed

    private void BTFichasDuplexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTFichasDuplexActionPerformed
         GeradorPDF gpdf = new GeradorPDF();
         gpdf.gerarTodasFichasDeAvaliacao(evento.getId(), true,true);
         Aviso.setText("Fichas de Avaliação geradas!");
    }//GEN-LAST:event_BTFichasDuplexActionPerformed

    public void pesquisarAvaliadores() {
        if (apresentacoes.size() < 1) {
            return;
        }
        boolean comOral=false;
       
        
        int idA = apresentacoes.get(CBApresentacao.getSelectedIndex()).getId();
        if(idA<0){
            idA = -idA;
            comOral = true;
        }
       avaliadores = new ArrayList<>();
       
      /* if(apresentacoes.get(CBApresentacao.getSelectedIndex()).getCategoriaCod()==4) //Para IFTECH, seleciona Todos os avaliadores.
       avaliadores = BancoDeDados.comando().recuperarAvaliadoresPossiveisParaArea(
               -1, 
               pesquisacentralizadoOuNao(), 
               idA, true);
           else*/
       avaliadores = BancoDeDados.comando().recuperarAvaliadoresPossiveisParaArea(
               apresentacoes.get(CBApresentacao.getSelectedIndex()).getAreaParaSelecaoAvaliadores(), 
               pesquisacentralizadoOuNao(), 
               idA, true,evento.getId());
       // }
        System.out.println(avaliadores.size() + " avaliadores na memória.");

        for(avaliador av: avaliadores)
            av.descobrirQuantasEstaAvaliando(evento);
        
        // muda a interface
        atualizarInterface();

        // verifica opções ja marcadas
        recuperarPermissoesDeAvaliacao();
        aprsAtual = apresentacoes.get(CBApresentacao.getSelectedIndex()).getId();
    }

    public int pesquisacentralizadoOuNao(){
    
    if(CBCoord.getSelectedItem().toString().equals("Centralizado"))
    return 1;
    else return 0;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EscolheAvaliadoresApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EscolheAvaliadoresApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EscolheAvaliadoresApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EscolheAvaliadoresApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // new EscolheAvaliadoresApresentacoes(coord).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Aviso;
    private javax.swing.JButton BTFichasDuplex;
    private javax.swing.JButton BTFichasFrente;
    private javax.swing.JButton BTSalvar;
    private javax.swing.JComboBox CBApresentacao;
    private javax.swing.JComboBox CBCoord;
    private javax.swing.JSlider Slider;
    // End of variables declaration//GEN-END:variables

    private void atualizarInterface() {

        //checkbox ( nome, titulo, unidade) tooltip: Telefone, tipopessoa
        if (avSelecionados != null) {
            for (int a = 0; a < avSelecionados.size(); a++) {
                avSelecionados.get(a).setBounds(1, 1, 1, 1);
                avSelecionados.get(a).setEnabled(false);
                avSelecionados.get(a).setVisible(false);
                
            }
        }

        avSelecionados = new ArrayList<>();
        boolean visible = true;
        pagina = 0;
        int atraso = 0;

        for (int a = 0; a < avaliadores.size(); a++) {

            //adiciona ao vetor local
            avSelecionados.add(new JCheckBox(avaliadores.get(a).getNome() + " (" + avaliadores.get(a).getTitulacaoNome() + ", " + avaliadores.get(a).getUnidadeNome() + ") - "+ avaliadores.get(a).getNumeroAvaliacoesCadastradas()+ " avaliações a realizar"));
            // set bounds
            avSelecionados.get(a).setBounds(Xminimo,
                    Yminimo + ((a - atraso) * (alturaCH + espacoVerticalEntreCampos)),
                    larguraCH, alturaCH);
            // set tooltip
            avSelecionados.get(a).setToolTipText("Tel: " + avaliadores.get(a).getTelefone() + " (" + avaliadores.get(a).getTipoPessoaNome() + ")");
            // set visible e enabled
            avSelecionados.get(a).setVisible(visible);
            avSelecionados.get(a).setEnabled(visible);
            // adiciona ao panel
            this.add(avSelecionados.get(avSelecionados.size() - 1));

            //se passar do limiteAltura, volta ao inicio, mas sempre deixar visible=false
            if ((Yminimo + (a - atraso) * (alturaCH + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                visible = false;
                pagina++;
                atraso = a + 1;
                System.out.println("Avaliador n°" + a + " foi o último da página " + (pagina - 1));
            }

        }
        Slider.setMinimum(0);
        Slider.setMaximum(pagina);

    }

    private void reloadApresentacoes() {

        iniciado = false;
        CBApresentacao.removeAllItems();
        apresentacoes = BancoDeDados.comando().recuperarListaGeralApresentacoes
        (coord.get(CBCoord.getSelectedIndex()).getCentralizado(), coord.get(CBCoord.getSelectedIndex()).getUnidadeCodigo(),evento);
        System.out.println(apresentacoes.size() + " apresentações na memória.");
        
        fazerAparecerDivisaoComunicacaoOral();
        
        for (apresentacao ap : apresentacoes) {
            CBApresentacao.addItem(ap.getNometitulo() + " (" + ap.getUnidadeNome() + ", Area " + nomeArea(ap.getAreaParaSelecaoAvaliadores()) + ", ID "+ap.getId()+")");
        }
        iniciado = true;
    }

    private void fazerAparecerDivisaoComunicacaoOral(){
        
        ArrayList<apresentacao> aps = new ArrayList<>();
        apresentacao apre;
        
        for(apresentacao a: apresentacoes)
            if(a.getModalidadeCod()==2)
            {
            apre = new apresentacao();
            apre.setId(-a.getId());
            apre.setGrandeArea(a.isGrandeArea());
            apre.setNometitulo("Com. Oral: "+a.getNometitulo());
            apre.setAreaNome(a.getAreaNome());
            apre.setUnidadeNome(a.getUnidadeNome());
            apre.setAreaCod(a.getAreaCod());
            apre.setCategoriaCod(a.getCategoriaCod());
            apre.setCategoriaNome(a.getCategoriaNome());
            apre.setUnidadeCod(a.getUnidadeCod());
            apre.setEventoCod(a.getEventoCod());
            
            apre.setAreaTematica(a.isAreaTematica());
            
            
            aps.add(apre);
           
            }
        
        System.out.println("Existem "+ aps.size()+ " apresentações de COMUNICAÇÂO ORAL");
        
        apresentacoes.addAll(aps);
        
    }
    
    
    private void recuperarPermissoesDeAvaliacao() {
        iniciado = false;
        boolean comOral = false;
        
        int idA = apresentacoes.get(CBApresentacao.getSelectedIndex()).getId();
        
        if(apresentacoes.get(CBApresentacao.getSelectedIndex()).isOral()>0)
            comOral = true;
        //    idA = - idA;
        
         evento e = evento;
        
        permissoesAvaliacao = BancoDeDados.comando().recuperarAvaliacoes("", coord.get(CBCoord.getSelectedIndex()).getCentralizado(), idA,comOral,false,e.getId());
        System.out.println("Ja há cadastro de " + permissoesAvaliacao.size() + " permissoes para avaliacao!");
        
        for (avaliacao pav : permissoesAvaliacao) {
            for (int a = 0; a < avaliadores.size(); a++) {
                if (pav.getAvaliador().equals(avaliadores.get(a).getCpf())) {
                    avSelecionados.get(a).setSelected(true);
                    System.out.print(avaliadores.get(a).getNome() + " avalia! ");
                }
            }
        }
        iniciado = true;
    }

    public void salvar() {

        if (avaliadores == null) {
            return;
        }

        for (int a = 0; a < avaliadores.size(); a++) {
            if (avSelecionados.get(a).isSelected()) {  // está selecionado. Incluir caso não esteja no BD
                boolean encontrou = false;
                for (avaliacao pav : permissoesAvaliacao) {
                    if (pav.getAvaliador().equals(avaliadores.get(a).getCpf())) {
                        encontrou = true;
                    }
                }
                if (!encontrou) {
                    avaliacao nova = new avaliacao();
                    nova.setApresentacao(apresentacoes.get(CBApresentacao.getSelectedIndex()).getId());
                    nova.setAtiva(false);  //???????
                    nova.setAusente(false);
                    nova.setAvaliador(avaliadores.get(a).getCpf());
                    nova.setCentralizado(coord.get(CBCoord.getSelectedIndex()).getCentralizado());
                    nova.setSalvoNoBD(false);
                    nova.setPrecisaEstarNoBD(true);
                    nova.setOral(apresentacoes.get(CBApresentacao.getSelectedIndex()).isOral());
                    nova.adequarNoBD(avaliadores.get(a).getCpf());
                    
                }

            } else {  // não está selecionado. Excluir caso esteja no BD
                for (avaliacao pav : permissoesAvaliacao) {
                    if (pav.getAvaliador().equals(avaliadores.get(a).getCpf())) { //se esse está dentro das avaliacões salvas no BD
                        //pav.setExcluir(true);
                        //pav.setPrecisaEstarNoBD(false);
                        //pav.adequarNoBD();
                        BancoDeDados.comando().excluirAvaliacao(pav);
                    }
                }
            }

        }

        if(CBApresentacao.getSelectedIndex()<(apresentacoes.size()-1))
        CBApresentacao.setSelectedIndex(CBApresentacao.getSelectedIndex()+1);
        
    }

    private void ativarAvaliadoresNaInterface(int pagina) {
        if (!iniciado) {
            return;
        }

        int pagAtual = 0;
        int atraso = 0;

        for (int a = 0; a < avaliadores.size(); a++) {
            avSelecionados.get(a).setVisible(pagina == pagAtual);
            avSelecionados.get(a).setEnabled(pagina == pagAtual);

            if ((Yminimo + (a - atraso) * (alturaCH + espacoVerticalEntreCampos)) > limiteAlturaJanela) {
                pagAtual++;
                 atraso = a + 1;
            }
           
        }

    }

    private String nomeArea(int id){
    
    for(area a: areas)
        if(a.getId()==id)
            return a.getNome();
    
    return "-";
    }
    
    
   /* private boolean bolsaSemArea(int areaCod) {

        for (int b = 0; b < bolsas.size(); b++) {

            if (bolsas.get(b).getId() == areaCod) {
                return !bolsas.get(b).classificaArea();
            }

        }
        return false;
    }*/

}
