/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import ClassesAuxiliares.Arrumador;
import ClassesAuxiliares.BancoDeDados;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import objetosBase.rankingApresentacao;
import objetosBase.triviais.area;
import objetosBase.triviais.categoria;
import objetosBase.triviais.evento;
import objetosBase.triviais.modalidade;
import objetosBase.triviais.subarea;
import objetosBase.triviais.unidade;

/**
 *
 * @author SistemaIP
 */
public class RankingApresentacoes extends javax.swing.JFrame {

    private final Inicial JP;
    private ArrayList<evento> eventos = new ArrayList<>();
    private ArrayList<rankingApresentacao> ranksApr = new ArrayList<>();
    private final ArrayList<unidade> unidades;
    private final ArrayList<area> areas;
    private ArrayList<subarea> subareas = new ArrayList<>();
    private boolean iniciado = false;
    private final ArrayList<categoria> categorias;

    /**
     * Creates new form RankingApresentacoes
     *
     * @param j Janela Inicial
     */
    public RankingApresentacoes(Inicial j) {
        initComponents();
        JP = j;
        this.setTitle("Ranking das apresentações");
        this.setLocationRelativeTo(null);
        // this.setResizable(false);
        this.setVisible(true);
//        this.setIconImage(Arrumador.comando().getIcone().getImage());
        getRootPane().setDefaultButton(BTGerarRanking);

        CBUnidade.removeAllItems();
        CBUnidade.addItem("Todas");
        unidades = BancoDeDados.comando().getUnidades();
        for (int a = 0; a < unidades.size(); a++) {
            CBUnidade.addItem(unidades.get(a).getNome());
        }

        CBArea.removeAllItems();
        CBArea.addItem("Todas");
        areas = BancoDeDados.comando().getAreas();
        for (int a = 0; a < areas.size(); a++) {
            CBArea.addItem(areas.get(a).getNome());
        }

        CBSubarea.removeAllItems();
        CBSubarea.addItem("Todas");
        // atualizaListaSubAreas();

        CBEvento.removeAllItems();
        eventos = BancoDeDados.comando().getTodosEventos();
        for (int a = 0; a < eventos.size(); a++) {
            CBEvento.addItem(eventos.get(a).getNome());
        }
        CBEvento.addItem("Todos");

        CBCentralizado.removeAllItems();
        CBCentralizado.addItem("Nos campi");
        CBCentralizado.addItem("Estadual");
        CBCentralizado.setSelectedIndex(1);

        CBModalidade.removeAllItems();
        CBModalidade.addItem("Todas");
        categorias = BancoDeDados.comando().getCategorias();
        for (int a = 0; a < categorias.size(); a++) {
            CBModalidade.addItem(categorias.get(a).getNome());
        }
        
        CBNivel.removeAllItems();
        ArrayList<String> niveis = Arrumador.comando().getNiveisDeCurso();
        for(int x=0;x<niveis.size();x++) {
            CBNivel.addItem(niveis.get(x));
        }

        iniciado = true;
        gerarRanking(false, "x");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TRelatorio = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        CBUnidade = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        CBArea = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        CBSubarea = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        CBCentralizado = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        CBEvento = new javax.swing.JComboBox();
        BTGerarRanking = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        CBModalidade = new javax.swing.JComboBox();
        BTGerarResumo = new javax.swing.JButton();
        LAviso = new javax.swing.JLabel();
        CBNivel = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        TRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Colocação", "Apresentação", "Apresentador", "Unidade", "Grande Area / Area", "Avaliações", "Média"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TRelatorio.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(TRelatorio);
        TRelatorio.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel1.setText("Unidade");

        CBUnidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Grande Area");

        CBArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBAreaItemStateChanged(evt);
            }
        });

        jLabel3.setText("Area");

        CBSubarea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Centralizado");

        CBCentralizado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Evento");

        CBEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        BTGerarRanking.setText("Ranking Completo");
        BTGerarRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTGerarRankingActionPerformed(evt);
            }
        });

        jLabel6.setText("Categoria");

        CBModalidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        BTGerarResumo.setText("Ranking Nivel Médio");
        BTGerarResumo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTGerarResumoActionPerformed(evt);
            }
        });

        LAviso.setForeground(new java.awt.Color(0, 153, 0));
        LAviso.setText("x");

        CBNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBNivel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBNivelItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CBEvento, 0, 185, Short.MAX_VALUE)
                                    .addComponent(CBUnidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CBCentralizado, 0, 175, Short.MAX_VALUE)
                                    .addComponent(CBArea, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CBModalidade, 0, 165, Short.MAX_VALUE)
                                    .addComponent(CBSubarea, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(LAviso, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BTGerarRanking, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CBNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BTGerarResumo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(108, 108, 108)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(CBEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(CBUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(CBModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(CBSubarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CBCentralizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CBArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))))
                        .addGap(10, 10, 10)
                        .addComponent(LAviso)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BTGerarRanking, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTGerarResumo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTGerarRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTGerarRankingActionPerformed

        gerarRanking(false, "x");

    }//GEN-LAST:event_BTGerarRankingActionPerformed

    private void gerarRanking(boolean resumo, String nivel) {

        if(!resumo)
            LAviso.setText("Exibindo ranking geral de '"+CBEvento.getSelectedItem().toString()+"'! "
                    + "Para lista com somente premiados, clique em 'Ranking Resumido'.");
        else
            LAviso.setText("Exibindo trabalhos premiados de '"+CBEvento.getSelectedItem().toString()+"'! "
                    + "Trabalhos com maiores notas de cada área, e dois premiados IFTECH.");
        
        ArrayList<String> areaJaFoi = new ArrayList<>();
        int mostraIfTechs = 2;

        //evento, centralizado, unidade, area, subarea
        ranksApr = BancoDeDados.comando().getRankingsApresentacoes(CBEvento.getSelectedItem().toString(), issnEvento(CBEvento.getSelectedItem().toString()), CBEvento.getSelectedIndex() != eventos.size(),
                CBCentralizado.getSelectedIndex(),
                CBUnidade.getSelectedItem().toString(), codigoUnidade(CBUnidade.getSelectedItem().toString()), CBUnidade.getSelectedIndex() > 0,
                CBArea.getSelectedItem().toString(), codigoArea(CBArea.getSelectedItem().toString()), CBArea.getSelectedIndex() > 0,
                CBSubarea.getSelectedItem().toString(), codigoSubarea(CBSubarea.getSelectedItem().toString()), CBSubarea.getSelectedIndex() > 0,
                CBModalidade.getSelectedItem().toString(), codigoModalidade(CBModalidade.getSelectedItem().toString()), CBModalidade.getSelectedIndex() > 0, 0, resumo, nivel);

        ranksApr.addAll(BancoDeDados.comando().getRankingsApresentacoes(CBEvento.getSelectedItem().toString(), issnEvento(CBEvento.getSelectedItem().toString()), CBEvento.getSelectedIndex() != eventos.size(),
                CBCentralizado.getSelectedIndex(),
                CBUnidade.getSelectedItem().toString(), codigoUnidade(CBUnidade.getSelectedItem().toString()), CBUnidade.getSelectedIndex() > 0,
                CBArea.getSelectedItem().toString(), codigoArea(CBArea.getSelectedItem().toString()), CBArea.getSelectedIndex() > 0,
                CBSubarea.getSelectedItem().toString(), codigoSubarea(CBSubarea.getSelectedItem().toString()), CBSubarea.getSelectedIndex() > 0,
                CBModalidade.getSelectedItem().toString(), codigoModalidade(CBModalidade.getSelectedItem().toString()), CBModalidade.getSelectedIndex() > 0, 1,resumo, nivel));

        
        
        String[] colunas;
        String[][] linhas;
        colunas = new String[10];
        linhas = new String[ranksApr.size()][10];
        int lin = 0;

        colunas[0] = "Colocação Geral";
        colunas[1] = "ID";
        colunas[2] = "Categoria";
        colunas[3] = "Area";
        colunas[4] = "Campus";
        colunas[5] = "Trabalho";
        colunas[6] = "Aluno";
        colunas[7] = "Média";
        colunas[8] = "N° Avaliações";
        colunas[9] = "Nivel";
        //colocacao, id, categoria, area, campus, trabalho, apresentador, nota, n° avaliacoes

        ArrayList<rankingApresentacao> rxs = new ArrayList<>();
        
        for (int a = 0; a < ranksApr.size(); a++) {

            if (resumo && areaJaFoi.indexOf(ranksApr.get(a).getAreaNome()) != -1) {   //se for resumo e a área já foi
                //acrescenta somente se Iftech e dentro dos limites IFTECH
                if(ranksApr.get(a).getCategoriaId()==4  && mostraIfTechs>0){ //categoria 4 é IFTECH
                    areaJaFoi.add("IFtech"+mostraIfTechs);
                    mostraIfTechs--;
                    lin = areaJaFoi.size() - 1;
                    //acrescenta nova linha
                    //linhas = acrescentaLinhas(linhas,lin,ranksApr.get(a));
                    rxs.add(ranksApr.get(a));
                }
                

            } else { //se não é resumo OU se area ainda não foi
                if (resumo) {
                    areaJaFoi.add(ranksApr.get(a).getAreaNome());
                    lin = areaJaFoi.size() - 1;
                } else {
                    lin = a;
                }
                
                //acrescenta nova linha
                //linhas = acrescentaLinhas(linhas,lin,ranksApr.get(a));
                rxs.add(ranksApr.get(a));
                
            }
        }
        
        // mantém somente trabalhos do nível selecionado
        ArrayList<rankingApresentacao> rz;
        rz = new ArrayList<>();
            for (int a = 0; a < rxs.size(); a++)
                if(rxs.get(a).getTipoCurso().equals(nivel))
                    rz.add(rxs.get(a));
        rxs = rz;
        
       /* if(nivel.equals("Nivel Medio")){ // só mantem no ranking o que for do nivel medio
            rz = new ArrayList<>();
            for (int a = 0; a < rxs.size(); a++)
                if(rxs.get(a).getTipoCurso().equals(nivel))
                    rz.add(rxs.get(a));
        
            rxs = rz;
        }else if(nivel.equals("pos")){ // coloca no ranking tudo que nao for do nivel medio
            rz = new ArrayList<>();
            for (int a = 0; a < rxs.size(); a++)
                if(!rxs.get(a).getTipoCurso().equals("Nivel Medio"))
                    rz.add(rxs.get(a));
            
            rxs = rz;
        }*/ //ELSE mantem todos os registros.
        
        
        if(resumo){
            
            rz = new ArrayList<>();
            //ordenar por area
            ArrayList<String> areas = new ArrayList<>();
            for (int a = 0; a < rxs.size(); a++)    
                if(!areas.contains(rxs.get(a).getCategoriaNome()))
                    areas.add(rxs.get(a).getCategoriaNome());


            for(int ar=0;ar<areas.size();ar++)
                for (int a = 0; a < rxs.size(); a++)    
                    if(rxs.get(a).getCategoriaNome().equals(areas.get(ar)))
                        rz.add(rxs.get(a));

            rxs = rz;
        }
        
        System.out.println("rxs="+rxs.size()+"; ranksApr="+ranksApr.size());
        for (int a = 0; a < rxs.size(); a++)
            linhas = acrescentaLinhas(linhas, a, rxs.get(a));
        
        DefaultTableModel model = new DefaultTableModel(linhas, colunas);
        TRelatorio.setModel(model);

    }

    
    private String[][] acrescentaLinhas(String[][] linhas, int lin, rankingApresentacao ra) {
        
                linhas[lin][0] = ra.getColocacao() + "°";
                linhas[lin][1] = ra.getApresentacaoID() + "";
                linhas[lin][2] = ra.getCategoriaNome();
                linhas[lin][3] = ra.getAreaNome();
                linhas[lin][4] = ra.getUnidadeNome();
                linhas[lin][5] = ra.getApresentacaoNome();
                linhas[lin][6] = ra.getApresentadorNome();
                linhas[lin][7] = ra.getMedia() + "";
                linhas[lin][8] = ra.getNumeroAvaliacoes() + "";
                linhas[lin][9] = ra.getTipoCurso();
        return linhas;
    }

    private void CBAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBAreaItemStateChanged
        if (iniciado) {
            atualizaListaSubAreas();
        }
    }//GEN-LAST:event_CBAreaItemStateChanged

    private void BTGerarResumoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTGerarResumoActionPerformed
        gerarRanking(true, CBNivel.getSelectedItem().toString());
    }//GEN-LAST:event_BTGerarResumoActionPerformed

    private void CBNivelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBNivelItemStateChanged
        if(iniciado) {
        BTGerarResumo.setText("Ranking "+ CBNivel.getSelectedItem().toString());
        }
    }//GEN-LAST:event_CBNivelItemStateChanged

    public void atualizaListaSubAreas() {
        subareas = getSubAreasDaArea(CBArea.getSelectedItem().toString());

        CBSubarea.removeAllItems();
        CBSubarea.addItem("Todas");

        if (subareas.size() < 1) {
            return;
        }

        for (subarea subarea : subareas) {
            CBSubarea.addItem(subarea.getNome());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RankingApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RankingApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RankingApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RankingApresentacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //  new RankingApresentacoes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTGerarRanking;
    private javax.swing.JButton BTGerarResumo;
    private javax.swing.JComboBox CBArea;
    private javax.swing.JComboBox CBCentralizado;
    private javax.swing.JComboBox CBEvento;
    private javax.swing.JComboBox CBModalidade;
    private javax.swing.JComboBox CBNivel;
    private javax.swing.JComboBox CBSubarea;
    private javax.swing.JComboBox CBUnidade;
    private javax.swing.JLabel LAviso;
    private javax.swing.JTable TRelatorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public ArrayList<subarea> getSubAreasDaArea(String nome) {
        for (area area : areas) {
            if (area.getNome().equals(nome)) {
                return area.getSubareas();
            }
        }

        return new ArrayList<subarea>();
    }

    private String nomeEvento(String issn) {
        for (int a = 0; a < eventos.size(); a++) {
            if (eventos.get(a).getId().equals(issn)) {
                return eventos.get(a).getNome();
            }
        }
        return "nulo";
    }

    private String issnEvento(String nome) {
        for (int a = 0; a < eventos.size(); a++) {
            if (eventos.get(a).getNome().equals(nome)) {
                return eventos.get(a).getId();
            }
        }

        return "nulo";
    }

    public int codigoUnidade(String nome) {

        for (int a = 0; a < unidades.size(); a++) {
            if (unidades.get(a).getNome().equals(nome)) {
                return unidades.get(a).getId();
            }
        }

        return -1;
    }

    public String nomeUnidade(int id) {

        for (int a = 0; a < unidades.size(); a++) {
            if (unidades.get(a).getId() == id) {
                return unidades.get(a).getNome();
            }
        }

        return "nulo";
    }

    private int codigoArea(String nome) {
        for (int a = 0; a < areas.size(); a++) {
            if (areas.get(a).getNome().equals(nome)) {
                return areas.get(a).getId();
            }
        }

        return -1;
    }

    public String nomeArea(int id) {

        for (int a = 0; a < areas.size(); a++) {
            if (areas.get(a).getId() == id) {
                return areas.get(a).getNome();
            }
        }

        return "nulo";
    }

    private int codigoSubarea(String nome) {
        for (int a = 0; a < subareas.size(); a++) {
            if (subareas.get(a).getNome().equals(nome)) {
                return subareas.get(a).getId();
            }
        }

        return -1;
    }

    private int codigoModalidade(String nome) {
        for (int a = 0; a < categorias.size(); a++) {
            if (categorias.get(a).getNome().equals(nome)) {
                return categorias.get(a).getId();
            }
        }

        return -1;
    }

   

}
